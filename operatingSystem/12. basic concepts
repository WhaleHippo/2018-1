-단어정리
CPU burst : 멀티프로세싱에서 CPU를 사용하는 단절된 구간으로, 스케쥴링의 단위(CPU를 받아 수행하는 시간)이다.


-내용정리 : 본격적인 내용에 들어가기 전에 약간의 개념 정리
Preemptible, Non-Preemptible의 개념을 조금더 확장시켜보자. 이 개념은 비단 스케쥴링에서만이 아니라 리소스에서도 확정될 수 있다.
	1. Preemptible Resource : 한 프로스세가 점유한 상태에서 다른 프로세스에게 양보할 수 있는 자원
		CPU, 몌인 몌모리
	2. Non Preemptible Resource : 양보할 수 없는 자원
		프린터(때에 따라)


이처럼 리소스를 여러 프로세스들이 점유하고 싶어하면 arbtration 문제가 발생하는데, 그 대상이 CPU일때가 스케쥴링
스케쥴링에서 고려할 문제는 사실상 2가지이다. : 그리고 이게 다음 챕터의 핵섬이다.

1. 여러 프로세스가 CPU를 점유하고 싶어할때, 누구에게 줄것인지.
2. 한 프로세스가 CPU를 점유하면, 얼마만큼 오래 CPU를 제공해야하나?

-CPU burst
배치모니터 시절의 수행의 주체는 "JOB"이라고 불렀다. 잡과 프로세스는 어떻게 달라질까?
일단 job은 한번 수행되면 완료될때까지 계속 수행된다.
하지만 프로세스는 degree of multiprograming이 여러 개일 수 있다(물론 배치도 IO인터럽트가 있긴하지만, 이건 너무 단순하니 생략하자). 즉 잡이 여러 개일 수 있다.
잡의 경우는 수행 길이가 그 잡의 수명이 되는데, 대체로 잡의 길이만큼 CPU를 할당하면 된다. 하지만 프로세스는? 멀티프로세스의 경우는 CPU의 할당 기준을 무엇으로 삼아야할까? 그때 스케쥴링의 단위로 삼기위해서 정의한 개념이 CPU burst이다.
프로그램의 수행을 보면, CPU를 차지하는 부분, IO등의 인터럽트를 기다리는 부분등이 있는데, CPU를 사용하는 분리된 구간을 말한다. 참고로 burst 역시 일종의 접미사라, IO burst 뭐 이런식으로 쓸 수 있다.
	CPU burst가 큰 프로그램 : 고연산, 저인터럽트
	CPU burst가 작은 프로그램 : 고인터럽트, 저연산

