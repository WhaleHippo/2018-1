용어정리
세그멘테이션
논리주소
물리주소
address translation : 논리주소에서 물리주소로 MMU가 바꾸는 것.
세그먼트 테이블
STBR(세그먼트 테이블 베이스 레지스터)

내용정리
메모리 관리에서 효율성은 높이고, 부작용은 줄이는게 목적. 그게 세그멘테이션과 페이징
스토리라인은 4단계
	1. 세그멘테이션
	2. 세그멘테이션의 문제점을 해결하기 위한 페이징
	3. 페이징의 문제점을 해결하기 위한 페이지드 세그멘티에션
	4. 1,2,3의 오버헤드와 아키텍쳐의 변화에 대응하기 위한 향상기법들

우선 세그멘테이션

-세그멘테이션
멀튀프로그뤰드 배치 모니터 시절로 돌아가자. 여러개의 job들이 들어가고, 완료되는 놈들은 빠져나온다. 이 모양만 보면 마치 전의 동적할당에서의 그게 생각난다. 문제 발생!
	일단 파편화문제가 있다.
	또한 유저프로세스가 하나의 메모리 세그먼트를 받는다. 메모리는 data, text, stack/heap 섹션으로 나뉘었는데, 배치 모니터는 섹션이 하나뿐이라 그게 안된다. 이게 문제인 이유는, TEXT섹션은 read only, data, stack/heap은 read & write로 속성이 다르다. 근데 배치 모니터는 이런 속성의 차이점을 살리기 힘들다. 즉 (두 유저프로세스가 동일한 코드(Text section)의 공유가 불가, 메모리 마다 read, write 권한 설정 불가)란 문제가 있다.

메모리 세그멘테이션은 이러한 섹션을 나누자는 거였는데, 세그멘테이션의 일차적인 문제점은, 섹션마다의 어드레싱이 어렵다는 거였다. 배치 모니터는 걍 base, bound 레지스터만 있으면 되었으니까.
이를 하드웨어 적으로 구현하기 위해선 2가지 기법이 있었다.

	1. CPU가 세그멘트를 지원하기 위한 유한개의 레지스터를 제공한다 : 인텔의 방법
	2. 좀더 일반적인 형태로, 메모리에 세그머트의 베이스, 바운드 페어를 테이블로 기록한다. : 수업에서 논의할 방법 : table driven segmentaion

본격적인 세그멘테이션 설명에 들어가기에 앞서, 배경지식을 조금만 더 살펴보자.

-배경지식 1 : 논리어드레스, 물리 어드레스
논리어드레스 : CPU가 생성하는 어드레스, 컴파일러, 링커가 보는 어드레스
물리어드레스 : MMU로 변환되어 메모리와 1:1 대응되는 어드레스
요즘은 MMU와 CPU가 합체!해서 나오지만, 호랑이가 댐배피던 시절에는 두개가 분리되어 있었다.
논리 어드레스에서 물리 어드레스로 바뀌는 과정을 어드레스 translation이라고 한다.

-배경지식 2 : MMU 매커니즘
MMU는 이제 메인메모리에 엑세스할 수 있는 권한이 있어야 함을 알 수 있다.
MMU는 CPU로 부터 논리 어드레스를 받으면, 우선적으로 세그먼트에서 나온 주소를 이용해서 테이블 LOOK UP을 해서 base regster를 가져온다.
헌데 MMU가 지금 받은 세그먼트를 어떻게 구분할까?
논리 어드레스를 분할해서 구분한다. 32bit라면 0~2^32-1 개의 주소를 가진다. 상위 2비트로 이걸 code, data,stack/heap으로 나눈다. 나머지 3bit는 그걸 해당 세그먼트내의 offset으로 삼는다.
또한 MMU는 STBR(세그먼트 테이블 베이스 레지스터)라고해서, 세그먼트 테이블의 시작주소를 가지고 있는 특별한 레지스터를 가지고 있어, 이를 통해 메모리상에 위치한 세그먼트 테이블에 접속할 수 있다.
프로세스가 교체될때마다, STBR를 바꿔주는 것으로 세그먼트 테이블을 바꾼다.

-배경지식 3 : 세그먼트 테이블은 어떤 정보를 저장해야할까?
일단 base, bound를 저장해야한다. 그리고, 해당 세그먼트가 Read, Write가 가능한지 알아야 한다.
또한 



-세그멘테이션이 유발하는 문제점
1. 가장 심각한 문제점은, 한번의 메모리를 엑세스하는데 실질적으로 2번의 메모리 엑세스가 필요하다는 것이다. 메모리 엑세스는 CPU의 인스트럭션에 비해서 속도가 느리고, 이로 인해서 속도가 배는 느려진다.
2. 살짝 더 심각한 문제점은, 세그먼트가 메인메모리에 많이 만들어지면, 파편화가 발생한다.
3. 스택 세그먼트는 고정되어 있는데, 스택이 더 커지는 경우도 있다. 이러면 보통은 에러긴한데, OS가 스택세그먼트를 늘려줄 수 있으면 좋다. 스택의 주변이 비어있다면 걍 바운드 범위를 높여버리면 그만이지만, 그게 안된다면 골아파진다. 스왚도 해야하고 골아픔.
