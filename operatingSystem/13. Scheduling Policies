단어 정리
-CPU busrt : 
-fairness
-starvation : CPU가 monopolize되어 버리는 문제
-aging
-CPU bound 프로세스
-I/O bound 프로세스
-

내용 정리
-스케쥴링의 목적
1. 누구에게 줄것인가?
2. 얼마나 줄것인가?
waiting 타임의 최소화, 데드라인 만족, 오버해드 감소, 리소스 효율 ++, 스위칭 -- ...

-스케쥴링의 변천사 : GP스케쥴링 -> 우선순위 스케쥴링 -> Fair Share 스케쥴링(Bandwidth, proportiial share)

-GP스케쥴링 방법 : FIFO, RR, SJF, MLFQ
1. FIFO : 먼저들어온게 먼저수행. I/O block 발생 전까지 계속 받음. timeslice가 무한인 RR
2. RR : timeslice를 프로세스마다 부여해서, 그게 다 소진되면 CPU가 스케쥴링
	언뜻보면 FIFO보다 모든 면에서 좋아보이지만, 프로세스들이 PU burst가 비슷하면 오히려 안좋아짐. 
3. SJF : CPU burst가 작은 순으로. general porpose의 경우, 이게 가장 최적의 방법임
	하지만 CPU burst는 예측하는게 불가능하다.
	어케든 CPU burst를 예측하겠다고 해서 알파로 계산해보는게 있다.
	지금 예측값 : 알파*직전 cpubusrt의 실제값 +(1-알파)* 직전 CPU busrt의 예측값
4. MLFQ : readyQueue를 우선순위별로 준비하고, 우선순위가 내려갈수록 Timeslice는 증가시키는것(보통 배로).
	우선 새로운 프로세스가 들어오면 그건 제일 우선순위가 높은 queue로 들어가고, 만약 timeslice를 다 써버리면 강등한다. 이런식으로 하면, 위의 queue는 I/O bound, 아래는 CPU bound 프로세스가 있을 확률이 높아진다. 또한, MLFQ는 다시 non-Preemptive와 Preemptive로 나뉘는데, 스케쥴링 시점이 다르다. 전자는 현재 수행중인 태스크가 종료될때만 되는 반면, 후자는 새로운 테스크가 생성되거나 깨어날때도 스케쥴링을 한다.

4.1 로테이팅 스테어 케이스 데드라인 스케쥴링 : MLFQ의 일종으로 큐의 중간이나 앞, 뒤에도 올 수 있는 것.

-우선순위 스케쥴링 방법 : 우선적으로 수행해야 할 크리티컬한 프로세스가 있을 경우.
우선순위를 두어서 하는 것
-starvation
우선순위를 둔 경우, 우선순위가 낮은 프로세스의 wating이 매우 길어진다. 이걸 방지하기 위해서, 기다리는 시간에 비례해서 우선순위를 올리는 aging기법같은 보상을 줄수 있는 스케쥴링 기법을 같이 적용해야 한다.


-Fair Share 스케쥴링
앞서 설명한 스케쥴링들과는 다른 기법
CPU에 전체에 주어진 용량을 CPU의 Bandwidth라 하는데 특정 프로세스에 Bandwidth가 몰리면, 멀티미디어등에는 문제가 발생한다. 이를 해소하기 위해서, 대기 중인 프로세스에게 정해진 비율에 따라 Bandwidth를 분배하는 스케쥴링 기법. 만약, 해당 프로세스가 정해진 비율보다 Bandwidth를 더/덜 받으면 큐의 뒤/앞으로 보내 "보상"을 해준다.ㄱ2
