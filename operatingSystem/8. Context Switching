-단어 정리
Context Switching : 현재 수행중인 프로세스의 state를 저장하고, 다음 수행될 프로세스의 state를 불러오는 작업
	Context Saving : 
	
-내용 정리

-콘텍스트 스위칭 과정
콘텍스트 스위칭에 앞서서 현재 콘텍스트들을 저장할 필요가 있다. 이때 각 요소들에 대해서 생각해보자.
여기서, 대피시킨다는것은 (레지스터 -> 캐시 -> 메모리 -> 스토리지) 순으로 이동시킴을 말한다. 물론, 캐시는 예외.
	CPU : CPU레지스터들은 모조리 대피시켜야 한다. 프로세스가 바뀌면 오염된다.
	커널 : 기억하지 않아도 된다. 왜냐하면 OS가 관리하기 때문에 오염될 염려가 없다.
	메모리 : 
		1. 대피시키지 않는다. : 배치모니터 시절에는 메모리값이 유지되기에 대피하지 않아도 된다.
		2. roll in roll out : 몽땅 대피시킨다. : 유니프로그래밍시에는 모조리 대피시켜야한다.
		3. Swap in Swap out : 디그리 오브 멀티프로그래밍이 높아졌을때 대피시킨다.

구체적인 과정은 이와 같다.
	1. 인터럽트가 발생한다.
	2. 인터럽트 과정에서 현재 수행중인 인스트럭션은 마무리
	3. 인터럽트 실행
	4. PSW의 mode bit가 1로 바뀜
	5. IRQ#를 확인하여 인터럽트 소스(시작주소)를 확인하고 점프
	6. 인터럽트 서비스 루틴 수행
	7. 리턴주소로 복귀.
		이 과정을 수행하기 위해서, 2~5과정 사이에서 현개 값들(PC, PSW, 리턴주소)를 저장해야한다.
		여기서 PSW와 리턴 주소값은 HW가 알아서 넣어주고,
		인터럽트 서비스 루틴 처음에 그 전의 레지스터 값들을 스택에 집어넣는다.
		
--------여기까지가 18:36분의 내용. 나머지는 나중에 작업할 예정------------
		
