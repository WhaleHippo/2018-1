단어 정리
-세마포어 : 다익스트라가 고안한 뮤추얼 익스클루전 메카니즘 : int형 변수+큐. 가드가 본 입장에서의 현재 열쇠수. 동기화를 제공하는 정수형 변수
-크리티컬 세션
-Mutual exclusion
-생산자-소비자 코딩
-atomic operation : H/W 차원에서 제공하는 원자적 접근-수정-쓰기 오퍼레이
-Test And Set(TAS)
-스핀 락


내용 정리

-세마포 개요
열쇠줘(P, LOCK, wait)-열쇠받아(V, UNLOCK, signal)로 구성되어 크리티컬 섹션을 만드는 것.

-세마포와 스케쥴링
세마포는 스케쥴링에도 관여한느데, 왜냐하면 열쇠줘!를 하는 과정에서 run에서 wait큐로 이동하고, 열쇠받아!를 통해서 wait큐에서 ready큐로 이동한다. 이는 세마포가 스케쥴링에 관여한다는 것을 말한다.

-세마포 초기화 : 시작되자 마자 시작하는 건 1로 초기화(가용 가능한 자원수), 시작 되자마자 시작되지 않고 나중에 시그널을 받아 수행되어야 하는 경우는 0으로 초기화.

-생산자-소비자 코딩
생산자 프로세스와 소비자 프로세스가 있을경우, 서로의 세마포를 겹쳐서 한다.
생산자의 세마포어는 1로 초기화, 소비자의 프로세스는 0으로 초기화


-세마포와 인터럽트 디스에이블의 비교
멀티테스킹시 인터럽트 디스에이블을 하면 다른 태크스도 문제가 발생. 하지만 세마포를 사용 할 시 그 테스크만 비활성화 가능

-세마포의 문제점 및 해결법
1. 세마포로 인한 버그는 발견하기 어렵다. 특히 의도파악이 힘들다(가드 목적인지, 생산자-소비자인지)
->mutex_lock, mutex_unlock이라고 하면 이건 크리티컬섹션 구현을 위한 가드임. 이건 컴파일러 차원에서 디버깅한다.



-세마포의 구현
열쇠수를 나타내는 int형 변수 1개와, 해당 자원을 노리는 다른 pcb들을 저장할 queue를 둔다.
세마포의 구현 안쪽에는 디스에이블-엔에이블 인터럽트가 있다. 이래도 되는 이유는, 그냥 구간이 매우 짧기 때문에
세마포의 값 : 양수이면 자원수, 0, 열쇠없음, 음수면 절대값이 대기타고 있는 프로세스 수





-멀티프로세서에서의 세마포 및 크리티컬 세션 구현
멀티프로세서 환경에서는 하나의 CPU의 인터럽트가 disable되어도, 다른 CPU는 여전히사용 가능 할 수 있다. 이러한 문제를 해결하기 위해서는 H/w차원에서 Atomic operation을 제공해야한다. 이런 Atomic operation의 대표적인 예가 TAS고, 이런 TAS를 무한루프로 돌리는 스핀락을 통해서 크리티컬 세션을 구현한다.
