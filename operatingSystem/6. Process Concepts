단어정리
프로세스 : 프로그램 스테이트에서 돌아가는 엑스큐션 스트림
	엑스큐선 코드 : 프로세스가 지금까지 수행한 모든 명령어들의 순서
	프로세스 스테이트 : 프로세스가 수행되는데 영향을 주는/받는 정보들
		메모리 스테이트(context) : 코드 세그먼트, 데이터 세그먼트(글로벌 변수), 스택 세그먼트(로컬 변수)
		CPU 스테이트(하드웨어 context) : 레지스터 값들
		커널 스테이트(시스템 context) : per-process kernel info

PCB : 프로세스 컨트롤 블록
	프로세스의 아이디, 스케쥴링 자원할당에 유용한 정보들을 포함하는 블록
	
프로세스 테이블 : PCB를 모아둔 자료구조. array로 해도 되고 리스트로 해도 되고


내용


프로세스는 자원할당의 주체 


멀티 프로그래밍과 멀티 프로세싱 
	멀티 프로그래밍 : 메모리의 관점
	멀티 프로세싱 : CPU의 관점

프로세스는 왜 유용한가?
	런타임 엔터티 : OS가 관리하는 단위이며, 수행의 주체이며 
	디자인 타임 엔터티 : 소프트웨어 시스템 개발에서 이야기함
	
소프트웨어 시스템 개발
	1. 설계 : 요구사항 명세서 -> 설계(추상화와 decomposintion) -> Tasks : 설계해야하는 시스템의 한 요소
	2. 구현 : Tasks -> 구현 -> 프로그램들 -> 프로세스들
	이처럼 설계단계에서 만든 task들이 프로세스들과 1:1로 맵핑되서 바로 수행이 가능하다. 즉 구현이 매우 쉬워진다. 이게 OS와 프로세스의 유용함이다.


프로그램이란 무엇인가? : 자료구조 + 알고리즘

프로세스를 OS에 어떻게 구현해야하는가?
	위의 정의에 의해 프로세스를 OS에 구현하려면 프로세스를 자료구조로 표현해야한다.
	위의 3개의 context를 구현해야한다. 이걸 PCB로 만들어서 관리한다. 이런 자료들을 배열이나 리스트로 만든다.
	또한 프로세스 스테이트 전이가 있다. 이때 스테이트는 위에서 명시한 스테이트는 아니다. 이런 프로세스의 전이가 프로세스의 생명주기라고 한다.
		new상태 : 만들어짐
		ready 상태 : CPU를 할당받지 못한상태
		running 상태 : cpu를 할당받아 하는 상태. 싱글코어 기준으로 1개 또는 0개
		waiting 상태 : 동기 입출력등으로 인하여 cpu가 잠시 이탈된 상태
		exit : 종료
	각 상태는 큐의 형태로 프로세스를(정확히는 PCB를) 저장해둔다. OS가 프로세스에게 해야하는건, 결국 이런 상태 전이이다. 이게 스케쥴링임 ㅇㅇ
